"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web-push";
exports.ids = ["vendor-chunks/web-push"];
exports.modules = {

/***/ "(rsc)/./node_modules/web-push/src/encryption-helper.js":
/*!********************************************************!*\
  !*** ./node_modules/web-push/src/encryption-helper.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst ece = __webpack_require__(/*! http_ece */ \"(rsc)/./node_modules/http_ece/ece.js\");\nconst encrypt = function(userPublicKey, userAuth, payload, contentEncoding) {\n    if (!userPublicKey) {\n        throw new Error(\"No user public key provided for encryption.\");\n    }\n    if (typeof userPublicKey !== \"string\") {\n        throw new Error(\"The subscription p256dh value must be a string.\");\n    }\n    if (Buffer.from(userPublicKey, \"base64url\").length !== 65) {\n        throw new Error(\"The subscription p256dh value should be 65 bytes long.\");\n    }\n    if (!userAuth) {\n        throw new Error(\"No user auth provided for encryption.\");\n    }\n    if (typeof userAuth !== \"string\") {\n        throw new Error(\"The subscription auth key must be a string.\");\n    }\n    if (Buffer.from(userAuth, \"base64url\").length < 16) {\n        throw new Error(\"The subscription auth key should be at least 16 \" + \"bytes long\");\n    }\n    if (typeof payload !== \"string\" && !Buffer.isBuffer(payload)) {\n        throw new Error(\"Payload must be either a string or a Node Buffer.\");\n    }\n    if (typeof payload === \"string\" || payload instanceof String) {\n        payload = Buffer.from(payload);\n    }\n    const localCurve = crypto.createECDH(\"prime256v1\");\n    const localPublicKey = localCurve.generateKeys();\n    const salt = crypto.randomBytes(16).toString(\"base64url\");\n    const cipherText = ece.encrypt(payload, {\n        version: contentEncoding,\n        dh: userPublicKey,\n        privateKey: localCurve,\n        salt: salt,\n        authSecret: userAuth\n    });\n    return {\n        localPublicKey: localPublicKey,\n        salt: salt,\n        cipherText: cipherText\n    };\n};\nmodule.exports = {\n    encrypt: encrypt\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL2VuY3J5cHRpb24taGVscGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsTUFBTUQsbUJBQU9BLENBQUM7QUFFcEIsTUFBTUUsVUFBVSxTQUFTQyxhQUFhLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxlQUFlO0lBQ3hFLElBQUksQ0FBQ0gsZUFBZTtRQUNsQixNQUFNLElBQUlJLE1BQU07SUFDbEI7SUFFQSxJQUFJLE9BQU9KLGtCQUFrQixVQUFVO1FBQ3JDLE1BQU0sSUFBSUksTUFBTTtJQUNsQjtJQUVBLElBQUlDLE9BQU9DLElBQUksQ0FBQ04sZUFBZSxhQUFhTyxNQUFNLEtBQUssSUFBSTtRQUN6RCxNQUFNLElBQUlILE1BQU07SUFDbEI7SUFFQSxJQUFJLENBQUNILFVBQVU7UUFDYixNQUFNLElBQUlHLE1BQU07SUFDbEI7SUFFQSxJQUFJLE9BQU9ILGFBQWEsVUFBVTtRQUNoQyxNQUFNLElBQUlHLE1BQU07SUFDbEI7SUFFQSxJQUFJQyxPQUFPQyxJQUFJLENBQUNMLFVBQVUsYUFBYU0sTUFBTSxHQUFHLElBQUk7UUFDbEQsTUFBTSxJQUFJSCxNQUFNLHFEQUNkO0lBQ0o7SUFFQSxJQUFJLE9BQU9GLFlBQVksWUFBWSxDQUFDRyxPQUFPRyxRQUFRLENBQUNOLFVBQVU7UUFDNUQsTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBRUEsSUFBSSxPQUFPRixZQUFZLFlBQVlBLG1CQUFtQk8sUUFBUTtRQUM1RFAsVUFBVUcsT0FBT0MsSUFBSSxDQUFDSjtJQUN4QjtJQUVBLE1BQU1RLGFBQWFkLE9BQU9lLFVBQVUsQ0FBQztJQUNyQyxNQUFNQyxpQkFBaUJGLFdBQVdHLFlBQVk7SUFFOUMsTUFBTUMsT0FBT2xCLE9BQU9tQixXQUFXLENBQUMsSUFBSUMsUUFBUSxDQUFDO0lBRTdDLE1BQU1DLGFBQWFuQixJQUFJQyxPQUFPLENBQUNHLFNBQVM7UUFDdENnQixTQUFTZjtRQUNUZ0IsSUFBSW5CO1FBQ0pvQixZQUFZVjtRQUNaSSxNQUFNQTtRQUNOTyxZQUFZcEI7SUFDZDtJQUVBLE9BQU87UUFDTFcsZ0JBQWdCQTtRQUNoQkUsTUFBTUE7UUFDTkcsWUFBWUE7SUFDZDtBQUNGO0FBRUFLLE9BQU9DLE9BQU8sR0FBRztJQUNmeEIsU0FBU0E7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2dvZ2dpbnMtYWktY29hY2gvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL2VuY3J5cHRpb24taGVscGVyLmpzP2FhN2EiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IGVjZSA9IHJlcXVpcmUoJ2h0dHBfZWNlJyk7XG5cbmNvbnN0IGVuY3J5cHQgPSBmdW5jdGlvbih1c2VyUHVibGljS2V5LCB1c2VyQXV0aCwgcGF5bG9hZCwgY29udGVudEVuY29kaW5nKSB7XG4gIGlmICghdXNlclB1YmxpY0tleSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gdXNlciBwdWJsaWMga2V5IHByb3ZpZGVkIGZvciBlbmNyeXB0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1c2VyUHVibGljS2V5ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN1YnNjcmlwdGlvbiBwMjU2ZGggdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgfVxuXG4gIGlmIChCdWZmZXIuZnJvbSh1c2VyUHVibGljS2V5LCAnYmFzZTY0dXJsJykubGVuZ3RoICE9PSA2NSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN1YnNjcmlwdGlvbiBwMjU2ZGggdmFsdWUgc2hvdWxkIGJlIDY1IGJ5dGVzIGxvbmcuJyk7XG4gIH1cblxuICBpZiAoIXVzZXJBdXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyB1c2VyIGF1dGggcHJvdmlkZWQgZm9yIGVuY3J5cHRpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHVzZXJBdXRoICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN1YnNjcmlwdGlvbiBhdXRoIGtleSBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5mcm9tKHVzZXJBdXRoLCAnYmFzZTY0dXJsJykubGVuZ3RoIDwgMTYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzdWJzY3JpcHRpb24gYXV0aCBrZXkgc2hvdWxkIGJlIGF0IGxlYXN0IDE2ICdcbiAgICArICdieXRlcyBsb25nJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHBheWxvYWQgIT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNCdWZmZXIocGF5bG9hZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BheWxvYWQgbXVzdCBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYSBOb2RlIEJ1ZmZlci4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycgfHwgcGF5bG9hZCBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgIHBheWxvYWQgPSBCdWZmZXIuZnJvbShwYXlsb2FkKTtcbiAgfVxuXG4gIGNvbnN0IGxvY2FsQ3VydmUgPSBjcnlwdG8uY3JlYXRlRUNESCgncHJpbWUyNTZ2MScpO1xuICBjb25zdCBsb2NhbFB1YmxpY0tleSA9IGxvY2FsQ3VydmUuZ2VuZXJhdGVLZXlzKCk7XG5cbiAgY29uc3Qgc2FsdCA9IGNyeXB0by5yYW5kb21CeXRlcygxNikudG9TdHJpbmcoJ2Jhc2U2NHVybCcpO1xuXG4gIGNvbnN0IGNpcGhlclRleHQgPSBlY2UuZW5jcnlwdChwYXlsb2FkLCB7XG4gICAgdmVyc2lvbjogY29udGVudEVuY29kaW5nLFxuICAgIGRoOiB1c2VyUHVibGljS2V5LFxuICAgIHByaXZhdGVLZXk6IGxvY2FsQ3VydmUsXG4gICAgc2FsdDogc2FsdCxcbiAgICBhdXRoU2VjcmV0OiB1c2VyQXV0aFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGxvY2FsUHVibGljS2V5OiBsb2NhbFB1YmxpY0tleSxcbiAgICBzYWx0OiBzYWx0LFxuICAgIGNpcGhlclRleHQ6IGNpcGhlclRleHRcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbmNyeXB0OiBlbmNyeXB0XG59O1xuIl0sIm5hbWVzIjpbImNyeXB0byIsInJlcXVpcmUiLCJlY2UiLCJlbmNyeXB0IiwidXNlclB1YmxpY0tleSIsInVzZXJBdXRoIiwicGF5bG9hZCIsImNvbnRlbnRFbmNvZGluZyIsIkVycm9yIiwiQnVmZmVyIiwiZnJvbSIsImxlbmd0aCIsImlzQnVmZmVyIiwiU3RyaW5nIiwibG9jYWxDdXJ2ZSIsImNyZWF0ZUVDREgiLCJsb2NhbFB1YmxpY0tleSIsImdlbmVyYXRlS2V5cyIsInNhbHQiLCJyYW5kb21CeXRlcyIsInRvU3RyaW5nIiwiY2lwaGVyVGV4dCIsInZlcnNpb24iLCJkaCIsInByaXZhdGVLZXkiLCJhdXRoU2VjcmV0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/encryption-helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/web-push/src/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst vapidHelper = __webpack_require__(/*! ./vapid-helper.js */ \"(rsc)/./node_modules/web-push/src/vapid-helper.js\");\nconst encryptionHelper = __webpack_require__(/*! ./encryption-helper.js */ \"(rsc)/./node_modules/web-push/src/encryption-helper.js\");\nconst WebPushLib = __webpack_require__(/*! ./web-push-lib.js */ \"(rsc)/./node_modules/web-push/src/web-push-lib.js\");\nconst WebPushError = __webpack_require__(/*! ./web-push-error.js */ \"(rsc)/./node_modules/web-push/src/web-push-error.js\");\nconst WebPushConstants = __webpack_require__(/*! ./web-push-constants.js */ \"(rsc)/./node_modules/web-push/src/web-push-constants.js\");\nconst webPush = new WebPushLib();\nmodule.exports = {\n    WebPushError: WebPushError,\n    supportedContentEncodings: WebPushConstants.supportedContentEncodings,\n    encrypt: encryptionHelper.encrypt,\n    getVapidHeaders: vapidHelper.getVapidHeaders,\n    generateVAPIDKeys: vapidHelper.generateVAPIDKeys,\n    setGCMAPIKey: webPush.setGCMAPIKey,\n    setVapidDetails: webPush.setVapidDetails,\n    generateRequestDetails: webPush.generateRequestDetails,\n    sendNotification: webPush.sendNotification.bind(webPush)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsY0FBY0MsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUMsbUJBQW1CRCxtQkFBT0EsQ0FBQztBQUNqQyxNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQztBQUMzQixNQUFNRyxlQUFlSCxtQkFBT0EsQ0FBQztBQUM3QixNQUFNSSxtQkFBbUJKLG1CQUFPQSxDQUFDO0FBRWpDLE1BQU1LLFVBQVUsSUFBSUg7QUFFcEJJLE9BQU9DLE9BQU8sR0FBRztJQUNmSixjQUFjQTtJQUNkSywyQkFBMkJKLGlCQUFpQkkseUJBQXlCO0lBQ3JFQyxTQUFTUixpQkFBaUJRLE9BQU87SUFDakNDLGlCQUFpQlgsWUFBWVcsZUFBZTtJQUM1Q0MsbUJBQW1CWixZQUFZWSxpQkFBaUI7SUFDaERDLGNBQWNQLFFBQVFPLFlBQVk7SUFDbENDLGlCQUFpQlIsUUFBUVEsZUFBZTtJQUN4Q0Msd0JBQXdCVCxRQUFRUyxzQkFBc0I7SUFDdERDLGtCQUFrQlYsUUFBUVUsZ0JBQWdCLENBQUNDLElBQUksQ0FBQ1g7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb2dnaW5zLWFpLWNvYWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1wdXNoL3NyYy9pbmRleC5qcz80ZWIyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdmFwaWRIZWxwZXIgPSByZXF1aXJlKCcuL3ZhcGlkLWhlbHBlci5qcycpO1xuY29uc3QgZW5jcnlwdGlvbkhlbHBlciA9IHJlcXVpcmUoJy4vZW5jcnlwdGlvbi1oZWxwZXIuanMnKTtcbmNvbnN0IFdlYlB1c2hMaWIgPSByZXF1aXJlKCcuL3dlYi1wdXNoLWxpYi5qcycpO1xuY29uc3QgV2ViUHVzaEVycm9yID0gcmVxdWlyZSgnLi93ZWItcHVzaC1lcnJvci5qcycpO1xuY29uc3QgV2ViUHVzaENvbnN0YW50cyA9IHJlcXVpcmUoJy4vd2ViLXB1c2gtY29uc3RhbnRzLmpzJyk7XG5cbmNvbnN0IHdlYlB1c2ggPSBuZXcgV2ViUHVzaExpYigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgV2ViUHVzaEVycm9yOiBXZWJQdXNoRXJyb3IsXG4gIHN1cHBvcnRlZENvbnRlbnRFbmNvZGluZ3M6IFdlYlB1c2hDb25zdGFudHMuc3VwcG9ydGVkQ29udGVudEVuY29kaW5ncyxcbiAgZW5jcnlwdDogZW5jcnlwdGlvbkhlbHBlci5lbmNyeXB0LFxuICBnZXRWYXBpZEhlYWRlcnM6IHZhcGlkSGVscGVyLmdldFZhcGlkSGVhZGVycyxcbiAgZ2VuZXJhdGVWQVBJREtleXM6IHZhcGlkSGVscGVyLmdlbmVyYXRlVkFQSURLZXlzLFxuICBzZXRHQ01BUElLZXk6IHdlYlB1c2guc2V0R0NNQVBJS2V5LFxuICBzZXRWYXBpZERldGFpbHM6IHdlYlB1c2guc2V0VmFwaWREZXRhaWxzLFxuICBnZW5lcmF0ZVJlcXVlc3REZXRhaWxzOiB3ZWJQdXNoLmdlbmVyYXRlUmVxdWVzdERldGFpbHMsXG4gIHNlbmROb3RpZmljYXRpb246IHdlYlB1c2guc2VuZE5vdGlmaWNhdGlvbi5iaW5kKHdlYlB1c2gpXG59O1xuIl0sIm5hbWVzIjpbInZhcGlkSGVscGVyIiwicmVxdWlyZSIsImVuY3J5cHRpb25IZWxwZXIiLCJXZWJQdXNoTGliIiwiV2ViUHVzaEVycm9yIiwiV2ViUHVzaENvbnN0YW50cyIsIndlYlB1c2giLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwcG9ydGVkQ29udGVudEVuY29kaW5ncyIsImVuY3J5cHQiLCJnZXRWYXBpZEhlYWRlcnMiLCJnZW5lcmF0ZVZBUElES2V5cyIsInNldEdDTUFQSUtleSIsInNldFZhcGlkRGV0YWlscyIsImdlbmVyYXRlUmVxdWVzdERldGFpbHMiLCJzZW5kTm90aWZpY2F0aW9uIiwiYmluZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/urlsafe-base64-helper.js":
/*!************************************************************!*\
  !*** ./node_modules/web-push/src/urlsafe-base64-helper.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n/**\n * @param {string} base64\n * @returns {boolean}\n */ function validate(base64) {\n    return /^[A-Za-z0-9\\-_]+$/.test(base64);\n}\nmodule.exports = {\n    validate: validate\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL3VybHNhZmUtYmFzZTY0LWhlbHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7Q0FHQyxHQUNELFNBQVNBLFNBQVNDLE1BQU07SUFDdEIsT0FBTyxvQkFBb0JDLElBQUksQ0FBQ0Q7QUFDbEM7QUFFQUUsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZKLFVBQVVBO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb2dnaW5zLWFpLWNvYWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1wdXNoL3NyYy91cmxzYWZlLWJhc2U2NC1oZWxwZXIuanM/NWY5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlKGJhc2U2NCkge1xuICByZXR1cm4gL15bQS1aYS16MC05XFwtX10rJC8udGVzdChiYXNlNjQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGU6IHZhbGlkYXRlXG59O1xuIl0sIm5hbWVzIjpbInZhbGlkYXRlIiwiYmFzZTY0IiwidGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/urlsafe-base64-helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/vapid-helper.js":
/*!***************************************************!*\
  !*** ./node_modules/web-push/src/vapid-helper.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst asn1 = __webpack_require__(/*! asn1.js */ \"(rsc)/./node_modules/asn1.js/lib/asn1.js\");\nconst jws = __webpack_require__(/*! jws */ \"(rsc)/./node_modules/jws/index.js\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst WebPushConstants = __webpack_require__(/*! ./web-push-constants.js */ \"(rsc)/./node_modules/web-push/src/web-push-constants.js\");\nconst urlBase64Helper = __webpack_require__(/*! ./urlsafe-base64-helper */ \"(rsc)/./node_modules/web-push/src/urlsafe-base64-helper.js\");\n/**\n * DEFAULT_EXPIRATION is set to seconds in 12 hours\n */ const DEFAULT_EXPIRATION_SECONDS = 12 * 60 * 60;\n// Maximum expiration is 24 hours according. (See VAPID spec)\nconst MAX_EXPIRATION_SECONDS = 24 * 60 * 60;\nconst ECPrivateKeyASN = asn1.define(\"ECPrivateKey\", function() {\n    this.seq().obj(this.key(\"version\").int(), this.key(\"privateKey\").octstr(), this.key(\"parameters\").explicit(0).objid().optional(), this.key(\"publicKey\").explicit(1).bitstr().optional());\n});\nfunction toPEM(key) {\n    return ECPrivateKeyASN.encode({\n        version: 1,\n        privateKey: key,\n        parameters: [\n            1,\n            2,\n            840,\n            10045,\n            3,\n            1,\n            7\n        ] // prime256v1\n    }, \"pem\", {\n        label: \"EC PRIVATE KEY\"\n    });\n}\nfunction generateVAPIDKeys() {\n    const curve = crypto.createECDH(\"prime256v1\");\n    curve.generateKeys();\n    let publicKeyBuffer = curve.getPublicKey();\n    let privateKeyBuffer = curve.getPrivateKey();\n    // Occassionally the keys will not be padded to the correct lengh resulting\n    // in errors, hence this padding.\n    // See https://github.com/web-push-libs/web-push/issues/295 for history.\n    if (privateKeyBuffer.length < 32) {\n        const padding = Buffer.alloc(32 - privateKeyBuffer.length);\n        padding.fill(0);\n        privateKeyBuffer = Buffer.concat([\n            padding,\n            privateKeyBuffer\n        ]);\n    }\n    if (publicKeyBuffer.length < 65) {\n        const padding = Buffer.alloc(65 - publicKeyBuffer.length);\n        padding.fill(0);\n        publicKeyBuffer = Buffer.concat([\n            padding,\n            publicKeyBuffer\n        ]);\n    }\n    return {\n        publicKey: publicKeyBuffer.toString(\"base64url\"),\n        privateKey: privateKeyBuffer.toString(\"base64url\")\n    };\n}\nfunction validateSubject(subject) {\n    if (!subject) {\n        throw new Error(\"No subject set in vapidDetails.subject.\");\n    }\n    if (typeof subject !== \"string\" || subject.length === 0) {\n        throw new Error(\"The subject value must be a string containing an https: URL or \" + \"mailto: address. \" + subject);\n    }\n    let subjectParseResult = null;\n    try {\n        subjectParseResult = new URL(subject);\n    } catch (err) {\n        throw new Error(\"Vapid subject is not a valid URL. \" + subject);\n    }\n    if (![\n        \"https:\",\n        \"mailto:\"\n    ].includes(subjectParseResult.protocol)) {\n        throw new Error(\"Vapid subject is not an https: or mailto: URL. \" + subject);\n    }\n    if (subjectParseResult.hostname === \"localhost\") {\n        console.warn(\"Vapid subject points to a localhost web URI, which is unsupported by \" + \"Apple's push notification server and will result in a BadJwtToken error when \" + \"sending notifications.\");\n    }\n}\nfunction validatePublicKey(publicKey) {\n    if (!publicKey) {\n        throw new Error(\"No key set vapidDetails.publicKey\");\n    }\n    if (typeof publicKey !== \"string\") {\n        throw new Error(\"Vapid public key is must be a URL safe Base 64 \" + \"encoded string.\");\n    }\n    if (!urlBase64Helper.validate(publicKey)) {\n        throw new Error('Vapid public key must be a URL safe Base 64 (without \"=\")');\n    }\n    publicKey = Buffer.from(publicKey, \"base64url\");\n    if (publicKey.length !== 65) {\n        throw new Error(\"Vapid public key should be 65 bytes long when decoded.\");\n    }\n}\nfunction validatePrivateKey(privateKey) {\n    if (!privateKey) {\n        throw new Error(\"No key set in vapidDetails.privateKey\");\n    }\n    if (typeof privateKey !== \"string\") {\n        throw new Error(\"Vapid private key must be a URL safe Base 64 \" + \"encoded string.\");\n    }\n    if (!urlBase64Helper.validate(privateKey)) {\n        throw new Error('Vapid private key must be a URL safe Base 64 (without \"=\")');\n    }\n    privateKey = Buffer.from(privateKey, \"base64url\");\n    if (privateKey.length !== 32) {\n        throw new Error(\"Vapid private key should be 32 bytes long when decoded.\");\n    }\n}\n/**\n * Given the number of seconds calculates\n * the expiration in the future by adding the passed `numSeconds`\n * with the current seconds from Unix Epoch\n *\n * @param {Number} numSeconds Number of seconds to be added\n * @return {Number} Future expiration in seconds\n */ function getFutureExpirationTimestamp(numSeconds) {\n    const futureExp = new Date();\n    futureExp.setSeconds(futureExp.getSeconds() + numSeconds);\n    return Math.floor(futureExp.getTime() / 1000);\n}\n/**\n * Validates the Expiration Header based on the VAPID Spec\n * Throws error of type `Error` if the expiration is not validated\n *\n * @param {Number} expiration Expiration seconds from Epoch to be validated\n */ function validateExpiration(expiration) {\n    if (!Number.isInteger(expiration)) {\n        throw new Error(\"`expiration` value must be a number\");\n    }\n    if (expiration < 0) {\n        throw new Error(\"`expiration` must be a positive integer\");\n    }\n    // Roughly checks the time of expiration, since the max expiration can be ahead\n    // of the time than at the moment the expiration was generated\n    const maxExpirationTimestamp = getFutureExpirationTimestamp(MAX_EXPIRATION_SECONDS);\n    if (expiration >= maxExpirationTimestamp) {\n        throw new Error(\"`expiration` value is greater than maximum of 24 hours\");\n    }\n}\n/**\n * This method takes the required VAPID parameters and returns the required\n * header to be added to a Web Push Protocol Request.\n * @param  {string} audience        This must be the origin of the push service.\n * @param  {string} subject         This should be a URL or a 'mailto:' email\n * address.\n * @param  {string} publicKey       The VAPID public key.\n * @param  {string} privateKey      The VAPID private key.\n * @param  {string} contentEncoding The contentEncoding type.\n * @param  {integer} [expiration]   The expiration of the VAPID JWT.\n * @return {Object}                 Returns an Object with the Authorization and\n * 'Crypto-Key' values to be used as headers.\n */ function getVapidHeaders(audience, subject, publicKey, privateKey, contentEncoding, expiration) {\n    if (!audience) {\n        throw new Error(\"No audience could be generated for VAPID.\");\n    }\n    if (typeof audience !== \"string\" || audience.length === 0) {\n        throw new Error(\"The audience value must be a string containing the \" + \"origin of a push service. \" + audience);\n    }\n    try {\n        new URL(audience); // eslint-disable-line no-new\n    } catch (err) {\n        throw new Error(\"VAPID audience is not a url. \" + audience);\n    }\n    validateSubject(subject);\n    validatePublicKey(publicKey);\n    validatePrivateKey(privateKey);\n    privateKey = Buffer.from(privateKey, \"base64url\");\n    if (expiration) {\n        validateExpiration(expiration);\n    } else {\n        expiration = getFutureExpirationTimestamp(DEFAULT_EXPIRATION_SECONDS);\n    }\n    const header = {\n        typ: \"JWT\",\n        alg: \"ES256\"\n    };\n    const jwtPayload = {\n        aud: audience,\n        exp: expiration,\n        sub: subject\n    };\n    const jwt = jws.sign({\n        header: header,\n        payload: jwtPayload,\n        privateKey: toPEM(privateKey)\n    });\n    if (contentEncoding === WebPushConstants.supportedContentEncodings.AES_128_GCM) {\n        return {\n            Authorization: \"vapid t=\" + jwt + \", k=\" + publicKey\n        };\n    }\n    if (contentEncoding === WebPushConstants.supportedContentEncodings.AES_GCM) {\n        return {\n            Authorization: \"WebPush \" + jwt,\n            \"Crypto-Key\": \"p256ecdsa=\" + publicKey\n        };\n    }\n    throw new Error(\"Unsupported encoding type specified.\");\n}\nmodule.exports = {\n    generateVAPIDKeys: generateVAPIDKeys,\n    getFutureExpirationTimestamp: getFutureExpirationTimestamp,\n    getVapidHeaders: getVapidHeaders,\n    validateSubject: validateSubject,\n    validatePublicKey: validatePublicKey,\n    validatePrivateKey: validatePrivateKey,\n    validateExpiration: validateExpiration\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/vapid-helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/web-push-constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/web-push/src/web-push-constants.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\nconst WebPushConstants = {};\nWebPushConstants.supportedContentEncodings = {\n    AES_GCM: \"aesgcm\",\n    AES_128_GCM: \"aes128gcm\"\n};\nWebPushConstants.supportedUrgency = {\n    VERY_LOW: \"very-low\",\n    LOW: \"low\",\n    NORMAL: \"normal\",\n    HIGH: \"high\"\n};\nmodule.exports = WebPushConstants;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL3dlYi1wdXNoLWNvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLG1CQUFtQixDQUFDO0FBRTFCQSxpQkFBaUJDLHlCQUF5QixHQUFHO0lBQzNDQyxTQUFTO0lBQ1RDLGFBQWE7QUFDZjtBQUVBSCxpQkFBaUJJLGdCQUFnQixHQUFHO0lBQ2xDQyxVQUFVO0lBQ1ZDLEtBQUs7SUFDTEMsUUFBUTtJQUNSQyxNQUFNO0FBQ1I7QUFFQUMsT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL2dvZ2dpbnMtYWktY29hY2gvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL3dlYi1wdXNoLWNvbnN0YW50cy5qcz83NzVjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgV2ViUHVzaENvbnN0YW50cyA9IHt9O1xuXG5XZWJQdXNoQ29uc3RhbnRzLnN1cHBvcnRlZENvbnRlbnRFbmNvZGluZ3MgPSB7XG4gIEFFU19HQ006ICdhZXNnY20nLFxuICBBRVNfMTI4X0dDTTogJ2FlczEyOGdjbSdcbn07XG5cbldlYlB1c2hDb25zdGFudHMuc3VwcG9ydGVkVXJnZW5jeSA9IHtcbiAgVkVSWV9MT1c6ICd2ZXJ5LWxvdycsXG4gIExPVzogJ2xvdycsXG4gIE5PUk1BTDogJ25vcm1hbCcsXG4gIEhJR0g6ICdoaWdoJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJQdXNoQ29uc3RhbnRzO1xuIl0sIm5hbWVzIjpbIldlYlB1c2hDb25zdGFudHMiLCJzdXBwb3J0ZWRDb250ZW50RW5jb2RpbmdzIiwiQUVTX0dDTSIsIkFFU18xMjhfR0NNIiwic3VwcG9ydGVkVXJnZW5jeSIsIlZFUllfTE9XIiwiTE9XIiwiTk9STUFMIiwiSElHSCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/web-push-constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/web-push-error.js":
/*!*****************************************************!*\
  !*** ./node_modules/web-push/src/web-push-error.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction WebPushError(message, statusCode, headers, body, endpoint) {\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.message = message;\n    this.statusCode = statusCode;\n    this.headers = headers;\n    this.body = body;\n    this.endpoint = endpoint;\n}\n(__webpack_require__(/*! util */ \"util\").inherits)(WebPushError, Error);\nmodule.exports = WebPushError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL3dlYi1wdXNoLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsYUFBYUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2hFQyxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDQyxXQUFXO0lBRTlDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0QsV0FBVyxDQUFDQyxJQUFJO0lBQ2pDLElBQUksQ0FBQ1IsT0FBTyxHQUFHQTtJQUNmLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtJQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBR0E7SUFDZixJQUFJLENBQUNDLElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNDLFFBQVEsR0FBR0E7QUFDbEI7QUFFQUssa0RBQXdCLENBQUNWLGNBQWNNO0FBRXZDTSxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29nZ2lucy1haS1jb2FjaC8uL25vZGVfbW9kdWxlcy93ZWItcHVzaC9zcmMvd2ViLXB1c2gtZXJyb3IuanM/MWI2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFdlYlB1c2hFcnJvcihtZXNzYWdlLCBzdGF0dXNDb2RlLCBoZWFkZXJzLCBib2R5LCBlbmRwb2ludCkge1xuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcblxuICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gIHRoaXMuYm9keSA9IGJvZHk7XG4gIHRoaXMuZW5kcG9pbnQgPSBlbmRwb2ludDtcbn1cblxucmVxdWlyZSgndXRpbCcpLmluaGVyaXRzKFdlYlB1c2hFcnJvciwgRXJyb3IpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlB1c2hFcnJvcjtcbiJdLCJuYW1lcyI6WyJXZWJQdXNoRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzQ29kZSIsImhlYWRlcnMiLCJib2R5IiwiZW5kcG9pbnQiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwicmVxdWlyZSIsImluaGVyaXRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/web-push-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/web-push-lib.js":
/*!***************************************************!*\
  !*** ./node_modules/web-push/src/web-push-lib.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst url = __webpack_require__(/*! url */ \"url\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst WebPushError = __webpack_require__(/*! ./web-push-error.js */ \"(rsc)/./node_modules/web-push/src/web-push-error.js\");\nconst vapidHelper = __webpack_require__(/*! ./vapid-helper.js */ \"(rsc)/./node_modules/web-push/src/vapid-helper.js\");\nconst encryptionHelper = __webpack_require__(/*! ./encryption-helper.js */ \"(rsc)/./node_modules/web-push/src/encryption-helper.js\");\nconst webPushConstants = __webpack_require__(/*! ./web-push-constants.js */ \"(rsc)/./node_modules/web-push/src/web-push-constants.js\");\nconst urlBase64Helper = __webpack_require__(/*! ./urlsafe-base64-helper */ \"(rsc)/./node_modules/web-push/src/urlsafe-base64-helper.js\");\n// Default TTL is four weeks.\nconst DEFAULT_TTL = 2419200;\nlet gcmAPIKey = \"\";\nlet vapidDetails;\nfunction WebPushLib() {}\n/**\n * When sending messages to a GCM endpoint you need to set the GCM API key\n * by either calling setGMAPIKey() or passing in the API key as an option\n * to sendNotification().\n * @param  {string} apiKey The API key to send with the GCM request.\n */ WebPushLib.prototype.setGCMAPIKey = function(apiKey) {\n    if (apiKey === null) {\n        gcmAPIKey = null;\n        return;\n    }\n    if (typeof apiKey === \"undefined\" || typeof apiKey !== \"string\" || apiKey.length === 0) {\n        throw new Error(\"The GCM API Key should be a non-empty string or null.\");\n    }\n    gcmAPIKey = apiKey;\n};\n/**\n * When making requests where you want to define VAPID details, call this\n * method before sendNotification() or pass in the details and options to\n * sendNotification.\n * @param  {string} subject    This must be either a URL or a 'mailto:'\n * address. For example: 'https://my-site.com/contact' or\n * 'mailto: contact@my-site.com'\n * @param  {string} publicKey  The public VAPID key, a URL safe, base64 encoded string\n * @param  {string} privateKey The private VAPID key, a URL safe, base64 encoded string.\n */ WebPushLib.prototype.setVapidDetails = function(subject, publicKey, privateKey) {\n    if (arguments.length === 1 && arguments[0] === null) {\n        vapidDetails = null;\n        return;\n    }\n    vapidHelper.validateSubject(subject);\n    vapidHelper.validatePublicKey(publicKey);\n    vapidHelper.validatePrivateKey(privateKey);\n    vapidDetails = {\n        subject: subject,\n        publicKey: publicKey,\n        privateKey: privateKey\n    };\n};\n/**\n   * To get the details of a request to trigger a push message, without sending\n   * a push notification call this method.\n   *\n   * This method will throw an error if there is an issue with the input.\n   * @param  {PushSubscription} subscription The PushSubscription you wish to\n   * send the notification to.\n   * @param  {string|Buffer} [payload]       The payload you wish to send to the\n   * the user.\n   * @param  {Object} [options]              Options for the GCM API key and\n   * vapid keys can be passed in if they are unique for each notification you\n   * wish to send.\n   * @return {Object}                       This method returns an Object which\n   * contains 'endpoint', 'method', 'headers' and 'payload'.\n   */ WebPushLib.prototype.generateRequestDetails = function(subscription, payload, options) {\n    if (!subscription || !subscription.endpoint) {\n        throw new Error(\"You must pass in a subscription with at least \" + \"an endpoint.\");\n    }\n    if (typeof subscription.endpoint !== \"string\" || subscription.endpoint.length === 0) {\n        throw new Error(\"The subscription endpoint must be a string with \" + \"a valid URL.\");\n    }\n    if (payload) {\n        // Validate the subscription keys\n        if (typeof subscription !== \"object\" || !subscription.keys || !subscription.keys.p256dh || !subscription.keys.auth) {\n            throw new Error(\"To send a message with a payload, the \" + \"subscription must have 'auth' and 'p256dh' keys.\");\n        }\n    }\n    let currentGCMAPIKey = gcmAPIKey;\n    let currentVapidDetails = vapidDetails;\n    let timeToLive = DEFAULT_TTL;\n    let extraHeaders = {};\n    let contentEncoding = webPushConstants.supportedContentEncodings.AES_128_GCM;\n    let urgency = webPushConstants.supportedUrgency.NORMAL;\n    let topic;\n    let proxy;\n    let agent;\n    let timeout;\n    if (options) {\n        const validOptionKeys = [\n            \"headers\",\n            \"gcmAPIKey\",\n            \"vapidDetails\",\n            \"TTL\",\n            \"contentEncoding\",\n            \"urgency\",\n            \"topic\",\n            \"proxy\",\n            \"agent\",\n            \"timeout\"\n        ];\n        const optionKeys = Object.keys(options);\n        for(let i = 0; i < optionKeys.length; i += 1){\n            const optionKey = optionKeys[i];\n            if (!validOptionKeys.includes(optionKey)) {\n                throw new Error(\"'\" + optionKey + \"' is an invalid option. \" + \"The valid options are ['\" + validOptionKeys.join(\"', '\") + \"'].\");\n            }\n        }\n        if (options.headers) {\n            extraHeaders = options.headers;\n            let duplicates = Object.keys(extraHeaders).filter(function(header) {\n                return typeof options[header] !== \"undefined\";\n            });\n            if (duplicates.length > 0) {\n                throw new Error(\"Duplicated headers defined [\" + duplicates.join(\",\") + \"]. Please either define the header in the\" + \"top level options OR in the 'headers' key.\");\n            }\n        }\n        if (options.gcmAPIKey) {\n            currentGCMAPIKey = options.gcmAPIKey;\n        }\n        // Falsy values are allowed here so one can skip Vapid `else if` below and use FCM\n        if (options.vapidDetails !== undefined) {\n            currentVapidDetails = options.vapidDetails;\n        }\n        if (options.TTL !== undefined) {\n            timeToLive = Number(options.TTL);\n            if (timeToLive < 0) {\n                throw new Error(\"TTL should be a number and should be at least 0\");\n            }\n        }\n        if (options.contentEncoding) {\n            if (options.contentEncoding === webPushConstants.supportedContentEncodings.AES_128_GCM || options.contentEncoding === webPushConstants.supportedContentEncodings.AES_GCM) {\n                contentEncoding = options.contentEncoding;\n            } else {\n                throw new Error(\"Unsupported content encoding specified.\");\n            }\n        }\n        if (options.urgency) {\n            if (options.urgency === webPushConstants.supportedUrgency.VERY_LOW || options.urgency === webPushConstants.supportedUrgency.LOW || options.urgency === webPushConstants.supportedUrgency.NORMAL || options.urgency === webPushConstants.supportedUrgency.HIGH) {\n                urgency = options.urgency;\n            } else {\n                throw new Error(\"Unsupported urgency specified.\");\n            }\n        }\n        if (options.topic) {\n            if (!urlBase64Helper.validate(options.topic)) {\n                throw new Error(\"Unsupported characters set use the URL or filename-safe Base64 characters set\");\n            }\n            if (options.topic.length > 32) {\n                throw new Error(\"use maximum of 32 characters from the URL or filename-safe Base64 characters set\");\n            }\n            topic = options.topic;\n        }\n        if (options.proxy) {\n            if (typeof options.proxy === \"string\" || typeof options.proxy.host === \"string\") {\n                proxy = options.proxy;\n            } else {\n                console.warn(\"Attempt to use proxy option, but invalid type it should be a string or proxy options object.\");\n            }\n        }\n        if (options.agent) {\n            if (options.agent instanceof https.Agent) {\n                if (proxy) {\n                    console.warn(\"Agent option will be ignored because proxy option is defined.\");\n                }\n                agent = options.agent;\n            } else {\n                console.warn(\"Wrong type for the agent option, it should be an instance of https.Agent.\");\n            }\n        }\n        if (typeof options.timeout === \"number\") {\n            timeout = options.timeout;\n        }\n    }\n    if (typeof timeToLive === \"undefined\") {\n        timeToLive = DEFAULT_TTL;\n    }\n    const requestDetails = {\n        method: \"POST\",\n        headers: {\n            TTL: timeToLive\n        }\n    };\n    Object.keys(extraHeaders).forEach(function(header) {\n        requestDetails.headers[header] = extraHeaders[header];\n    });\n    let requestPayload = null;\n    if (payload) {\n        const encrypted = encryptionHelper.encrypt(subscription.keys.p256dh, subscription.keys.auth, payload, contentEncoding);\n        requestDetails.headers[\"Content-Length\"] = encrypted.cipherText.length;\n        requestDetails.headers[\"Content-Type\"] = \"application/octet-stream\";\n        if (contentEncoding === webPushConstants.supportedContentEncodings.AES_128_GCM) {\n            requestDetails.headers[\"Content-Encoding\"] = webPushConstants.supportedContentEncodings.AES_128_GCM;\n        } else if (contentEncoding === webPushConstants.supportedContentEncodings.AES_GCM) {\n            requestDetails.headers[\"Content-Encoding\"] = webPushConstants.supportedContentEncodings.AES_GCM;\n            requestDetails.headers.Encryption = \"salt=\" + encrypted.salt;\n            requestDetails.headers[\"Crypto-Key\"] = \"dh=\" + encrypted.localPublicKey.toString(\"base64url\");\n        }\n        requestPayload = encrypted.cipherText;\n    } else {\n        requestDetails.headers[\"Content-Length\"] = 0;\n    }\n    const isGCM = subscription.endpoint.startsWith(\"https://android.googleapis.com/gcm/send\");\n    const isFCM = subscription.endpoint.startsWith(\"https://fcm.googleapis.com/fcm/send\");\n    // VAPID isn't supported by GCM hence the if, else if.\n    if (isGCM) {\n        if (!currentGCMAPIKey) {\n            console.warn(\"Attempt to send push notification to GCM endpoint, \" + \"but no GCM key is defined. Please use setGCMApiKey() or add \" + \"'gcmAPIKey' as an option.\");\n        } else {\n            requestDetails.headers.Authorization = \"key=\" + currentGCMAPIKey;\n        }\n    } else if (currentVapidDetails) {\n        const parsedUrl = url.parse(subscription.endpoint);\n        const audience = parsedUrl.protocol + \"//\" + parsedUrl.host;\n        const vapidHeaders = vapidHelper.getVapidHeaders(audience, currentVapidDetails.subject, currentVapidDetails.publicKey, currentVapidDetails.privateKey, contentEncoding);\n        requestDetails.headers.Authorization = vapidHeaders.Authorization;\n        if (contentEncoding === webPushConstants.supportedContentEncodings.AES_GCM) {\n            if (requestDetails.headers[\"Crypto-Key\"]) {\n                requestDetails.headers[\"Crypto-Key\"] += \";\" + vapidHeaders[\"Crypto-Key\"];\n            } else {\n                requestDetails.headers[\"Crypto-Key\"] = vapidHeaders[\"Crypto-Key\"];\n            }\n        }\n    } else if (isFCM && currentGCMAPIKey) {\n        requestDetails.headers.Authorization = \"key=\" + currentGCMAPIKey;\n    }\n    requestDetails.headers.Urgency = urgency;\n    if (topic) {\n        requestDetails.headers.Topic = topic;\n    }\n    requestDetails.body = requestPayload;\n    requestDetails.endpoint = subscription.endpoint;\n    if (proxy) {\n        requestDetails.proxy = proxy;\n    }\n    if (agent) {\n        requestDetails.agent = agent;\n    }\n    if (timeout) {\n        requestDetails.timeout = timeout;\n    }\n    return requestDetails;\n};\n/**\n * To send a push notification call this method with a subscription, optional\n * payload and any options.\n * @param  {PushSubscription} subscription The PushSubscription you wish to\n * send the notification to.\n * @param  {string|Buffer} [payload]       The payload you wish to send to the\n * the user.\n * @param  {Object} [options]              Options for the GCM API key and\n * vapid keys can be passed in if they are unique for each notification you\n * wish to send.\n * @return {Promise}                       This method returns a Promise which\n * resolves if the sending of the notification was successful, otherwise it\n * rejects.\n */ WebPushLib.prototype.sendNotification = function(subscription, payload, options) {\n    let requestDetails;\n    try {\n        requestDetails = this.generateRequestDetails(subscription, payload, options);\n    } catch (err) {\n        return Promise.reject(err);\n    }\n    return new Promise(function(resolve, reject) {\n        const httpsOptions = {};\n        const urlParts = url.parse(requestDetails.endpoint);\n        httpsOptions.hostname = urlParts.hostname;\n        httpsOptions.port = urlParts.port;\n        httpsOptions.path = urlParts.path;\n        httpsOptions.headers = requestDetails.headers;\n        httpsOptions.method = requestDetails.method;\n        if (requestDetails.timeout) {\n            httpsOptions.timeout = requestDetails.timeout;\n        }\n        if (requestDetails.agent) {\n            httpsOptions.agent = requestDetails.agent;\n        }\n        if (requestDetails.proxy) {\n            const { HttpsProxyAgent } = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/https-proxy-agent/dist/index.js\"); // eslint-disable-line global-require\n            httpsOptions.agent = new HttpsProxyAgent(requestDetails.proxy);\n        }\n        const pushRequest = https.request(httpsOptions, function(pushResponse) {\n            let responseText = \"\";\n            pushResponse.on(\"data\", function(chunk) {\n                responseText += chunk;\n            });\n            pushResponse.on(\"end\", function() {\n                if (pushResponse.statusCode < 200 || pushResponse.statusCode > 299) {\n                    reject(new WebPushError(\"Received unexpected response code\", pushResponse.statusCode, pushResponse.headers, responseText, requestDetails.endpoint));\n                } else {\n                    resolve({\n                        statusCode: pushResponse.statusCode,\n                        body: responseText,\n                        headers: pushResponse.headers\n                    });\n                }\n            });\n        });\n        if (requestDetails.timeout) {\n            pushRequest.on(\"timeout\", function() {\n                pushRequest.destroy(new Error(\"Socket timeout\"));\n            });\n        }\n        pushRequest.on(\"error\", function(e) {\n            reject(e);\n        });\n        if (requestDetails.body) {\n            pushRequest.write(requestDetails.body);\n        }\n        pushRequest.end();\n    });\n};\nmodule.exports = WebPushLib;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/web-push-lib.js\n");

/***/ })

};
;