"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http_ece";
exports.ids = ["vendor-chunks/http_ece"];
exports.modules = {

/***/ "(rsc)/./node_modules/http_ece/ece.js":
/*!**************************************!*\
  !*** ./node_modules/http_ece/ece.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*\n * Encrypted content coding\n *\n * === Note about versions ===\n *\n * This code supports multiple versions of the draft.  This is selected using\n * the |version| parameter.\n *\n * aes128gcm: The most recent version, the salt, record size and key identifier\n *    are included in a header that is part of the encrypted content coding.\n *\n * aesgcm: The version that is widely deployed with WebPush (as of 2016-11).\n *    This version is selected by default, unless you specify a |padSize| of 1.\n */ var crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar AES_GCM = \"aes-128-gcm\";\nvar PAD_SIZE = {\n    \"aes128gcm\": 1,\n    \"aesgcm\": 2\n};\nvar TAG_LENGTH = 16;\nvar KEY_LENGTH = 16;\nvar NONCE_LENGTH = 12;\nvar SHA_256_LENGTH = 32;\nvar MODE_ENCRYPT = \"encrypt\";\nvar MODE_DECRYPT = \"decrypt\";\nvar keylog;\nif (process.env.ECE_KEYLOG === \"1\") {\n    keylog = function(m, k) {\n        console.warn(m + \" [\" + k.length + \"]: \" + k.toString(\"base64url\"));\n        return k;\n    };\n} else {\n    keylog = function(m, k) {\n        return k;\n    };\n}\n/* Optionally base64 decode something. */ function decode(b) {\n    if (typeof b === \"string\") {\n        return Buffer.from(b, \"base64url\");\n    }\n    return b;\n}\nfunction HMAC_hash(key, input) {\n    var hmac = crypto.createHmac(\"sha256\", key);\n    hmac.update(input);\n    return hmac.digest();\n}\n/* HKDF as defined in RFC5869, using SHA-256 */ function HKDF_extract(salt, ikm) {\n    keylog(\"salt\", salt);\n    keylog(\"ikm\", ikm);\n    return keylog(\"extract\", HMAC_hash(salt, ikm));\n}\nfunction HKDF_expand(prk, info, l) {\n    keylog(\"prk\", prk);\n    keylog(\"info\", info);\n    var output = Buffer.alloc(0);\n    var T = Buffer.alloc(0);\n    info = Buffer.from(info, \"ascii\");\n    var counter = 0;\n    var cbuf = Buffer.alloc(1);\n    while(output.length < l){\n        cbuf.writeUIntBE(++counter, 0, 1);\n        T = HMAC_hash(prk, Buffer.concat([\n            T,\n            info,\n            cbuf\n        ]));\n        output = Buffer.concat([\n            output,\n            T\n        ]);\n    }\n    return keylog(\"expand\", output.slice(0, l));\n}\nfunction HKDF(salt, ikm, info, len) {\n    return HKDF_expand(HKDF_extract(salt, ikm), info, len);\n}\nfunction info(base, context) {\n    var result = Buffer.concat([\n        Buffer.from(\"Content-Encoding: \" + base + \"\\x00\", \"ascii\"),\n        context\n    ]);\n    keylog(\"info \" + base, result);\n    return result;\n}\nfunction lengthPrefix(buffer) {\n    var b = Buffer.concat([\n        Buffer.alloc(2),\n        buffer\n    ]);\n    b.writeUIntBE(buffer.length, 0, 2);\n    return b;\n}\nfunction extractDH(header, mode) {\n    var key = header.privateKey;\n    var senderPubKey, receiverPubKey;\n    if (mode === MODE_ENCRYPT) {\n        senderPubKey = key.getPublicKey();\n        receiverPubKey = header.dh;\n    } else if (mode === MODE_DECRYPT) {\n        senderPubKey = header.dh;\n        receiverPubKey = key.getPublicKey();\n    } else {\n        throw new Error(\"Unknown mode only \" + MODE_ENCRYPT + \" and \" + MODE_DECRYPT + \" supported\");\n    }\n    return {\n        secret: key.computeSecret(header.dh),\n        context: Buffer.concat([\n            Buffer.from(header.keylabel, \"ascii\"),\n            Buffer.from([\n                0\n            ]),\n            lengthPrefix(receiverPubKey),\n            lengthPrefix(senderPubKey) // application server\n        ])\n    };\n}\nfunction extractSecretAndContext(header, mode) {\n    var result = {\n        secret: null,\n        context: Buffer.alloc(0)\n    };\n    if (header.key) {\n        result.secret = header.key;\n        if (result.secret.length !== KEY_LENGTH) {\n            throw new Error(\"An explicit key must be \" + KEY_LENGTH + \" bytes\");\n        }\n    } else if (header.dh) {\n        result = extractDH(header, mode);\n    } else if (typeof header.keyid !== undefined) {\n        result.secret = header.keymap[header.keyid];\n    }\n    if (!result.secret) {\n        throw new Error(\"Unable to determine key\");\n    }\n    keylog(\"secret\", result.secret);\n    keylog(\"context\", result.context);\n    if (header.authSecret) {\n        result.secret = HKDF(header.authSecret, result.secret, info(\"auth\", Buffer.alloc(0)), SHA_256_LENGTH);\n        keylog(\"authsecret\", result.secret);\n    }\n    return result;\n}\nfunction webpushSecret(header, mode) {\n    if (!header.authSecret) {\n        throw new Error(\"No authentication secret for webpush\");\n    }\n    keylog(\"authsecret\", header.authSecret);\n    var remotePubKey, senderPubKey, receiverPubKey;\n    if (mode === MODE_ENCRYPT) {\n        senderPubKey = header.privateKey.getPublicKey();\n        remotePubKey = receiverPubKey = header.dh;\n    } else if (mode === MODE_DECRYPT) {\n        remotePubKey = senderPubKey = header.keyid;\n        receiverPubKey = header.privateKey.getPublicKey();\n    } else {\n        throw new Error(\"Unknown mode only \" + MODE_ENCRYPT + \" and \" + MODE_DECRYPT + \" supported\");\n    }\n    keylog(\"remote pubkey\", remotePubKey);\n    keylog(\"sender pubkey\", senderPubKey);\n    keylog(\"receiver pubkey\", receiverPubKey);\n    return keylog(\"secret dh\", HKDF(header.authSecret, header.privateKey.computeSecret(remotePubKey), Buffer.concat([\n        Buffer.from(\"WebPush: info\\x00\"),\n        receiverPubKey,\n        senderPubKey\n    ]), SHA_256_LENGTH));\n}\nfunction extractSecret(header, mode, keyLookupCallback) {\n    if (keyLookupCallback) {\n        if (!isFunction(keyLookupCallback)) {\n            throw new Error(\"Callback is not a function\");\n        }\n    }\n    if (header.key) {\n        if (header.key.length !== KEY_LENGTH) {\n            throw new Error(\"An explicit key must be \" + KEY_LENGTH + \" bytes\");\n        }\n        return keylog(\"secret key\", header.key);\n    }\n    if (!header.privateKey) {\n        // Lookup based on keyid\n        if (!keyLookupCallback) {\n            var key = header.keymap && header.keymap[header.keyid];\n        } else {\n            var key = keyLookupCallback(header.keyid);\n        }\n        if (!key) {\n            throw new Error('No saved key (keyid: \"' + header.keyid + '\")');\n        }\n        return key;\n    }\n    return webpushSecret(header, mode);\n}\nfunction deriveKeyAndNonce(header, mode, lookupKeyCallback) {\n    if (!header.salt) {\n        throw new Error(\"must include a salt parameter for \" + header.version);\n    }\n    var keyInfo;\n    var nonceInfo;\n    var secret;\n    if (header.version === \"aesgcm\") {\n        // old\n        var s = extractSecretAndContext(header, mode, lookupKeyCallback);\n        keyInfo = info(\"aesgcm\", s.context);\n        nonceInfo = info(\"nonce\", s.context);\n        secret = s.secret;\n    } else if (header.version === \"aes128gcm\") {\n        // latest\n        keyInfo = Buffer.from(\"Content-Encoding: aes128gcm\\x00\");\n        nonceInfo = Buffer.from(\"Content-Encoding: nonce\\x00\");\n        secret = extractSecret(header, mode, lookupKeyCallback);\n    } else {\n        throw new Error(\"Unable to set context for mode \" + header.version);\n    }\n    var prk = HKDF_extract(header.salt, secret);\n    var result = {\n        key: HKDF_expand(prk, keyInfo, KEY_LENGTH),\n        nonce: HKDF_expand(prk, nonceInfo, NONCE_LENGTH)\n    };\n    keylog(\"key\", result.key);\n    keylog(\"nonce base\", result.nonce);\n    return result;\n}\n/* Parse command-line arguments. */ function parseParams(params) {\n    var header = {};\n    header.version = params.version || \"aes128gcm\";\n    header.rs = parseInt(params.rs, 10);\n    if (isNaN(header.rs)) {\n        header.rs = 4096;\n    }\n    var overhead = PAD_SIZE[header.version];\n    if (header.version === \"aes128gcm\") {\n        overhead += TAG_LENGTH;\n    }\n    if (header.rs <= overhead) {\n        throw new Error(\"The rs parameter has to be greater than \" + overhead);\n    }\n    if (params.salt) {\n        header.salt = decode(params.salt);\n        if (header.salt.length !== KEY_LENGTH) {\n            throw new Error(\"The salt parameter must be \" + KEY_LENGTH + \" bytes\");\n        }\n    }\n    header.keyid = params.keyid;\n    if (params.key) {\n        header.key = decode(params.key);\n    } else {\n        header.privateKey = params.privateKey;\n        if (!header.privateKey) {\n            header.keymap = params.keymap;\n        }\n        if (header.version !== \"aes128gcm\") {\n            header.keylabel = params.keylabel || \"P-256\";\n        }\n        if (params.dh) {\n            header.dh = decode(params.dh);\n        }\n    }\n    if (params.authSecret) {\n        header.authSecret = decode(params.authSecret);\n    }\n    return header;\n}\nfunction generateNonce(base, counter) {\n    var nonce = Buffer.from(base);\n    var m = nonce.readUIntBE(nonce.length - 6, 6);\n    var x = ((m ^ counter) & 0xffffff) + ((m / 0x1000000 ^ counter / 0x1000000) & 0xffffff) * 0x1000000;\n    nonce.writeUIntBE(x, nonce.length - 6, 6);\n    keylog(\"nonce\" + counter, nonce);\n    return nonce;\n}\n/* Used when decrypting aes128gcm to populate the header values. Modifies the\n * header values in place and returns the size of the header. */ function readHeader(buffer, header) {\n    var idsz = buffer.readUIntBE(20, 1);\n    header.salt = buffer.slice(0, KEY_LENGTH);\n    header.rs = buffer.readUIntBE(KEY_LENGTH, 4);\n    header.keyid = buffer.slice(21, 21 + idsz);\n    return 21 + idsz;\n}\nfunction unpadLegacy(data, version) {\n    var padSize = PAD_SIZE[version];\n    var pad = data.readUIntBE(0, padSize);\n    if (pad + padSize > data.length) {\n        throw new Error(\"padding exceeds block size\");\n    }\n    keylog(\"padding\", data.slice(0, padSize + pad));\n    var padCheck = Buffer.alloc(pad);\n    padCheck.fill(0);\n    if (padCheck.compare(data.slice(padSize, padSize + pad)) !== 0) {\n        throw new Error(\"invalid padding\");\n    }\n    return data.slice(padSize + pad);\n}\nfunction unpad(data, last) {\n    var i = data.length - 1;\n    while(i >= 0){\n        if (data[i]) {\n            if (last) {\n                if (data[i] !== 2) {\n                    throw new Error(\"last record needs to start padding with a 2\");\n                }\n            } else {\n                if (data[i] !== 1) {\n                    throw new Error(\"last record needs to start padding with a 2\");\n                }\n            }\n            return data.slice(0, i);\n        }\n        --i;\n    }\n    throw new Error(\"all zero plaintext\");\n}\nfunction decryptRecord(key, counter, buffer, header, last) {\n    keylog(\"decrypt\", buffer);\n    var nonce = generateNonce(key.nonce, counter);\n    var gcm = crypto.createDecipheriv(AES_GCM, key.key, nonce);\n    gcm.setAuthTag(buffer.slice(buffer.length - TAG_LENGTH));\n    var data = gcm.update(buffer.slice(0, buffer.length - TAG_LENGTH));\n    data = Buffer.concat([\n        data,\n        gcm.final()\n    ]);\n    keylog(\"decrypted\", data);\n    if (header.version !== \"aes128gcm\") {\n        return unpadLegacy(data, header.version);\n    }\n    return unpad(data, last);\n}\n/**\n * Decrypt some bytes.  This uses the parameters to determine the key and block\n * size, which are described in the draft.  Binary values are base64url encoded.\n *\n * |params.version| contains the version of encoding to use: aes128gcm is the latest,\n * but aesgcm is also accepted (though the latter might\n * disappear in a future release).  If omitted, assume aes128gcm.\n *\n * If |params.key| is specified, that value is used as the key.\n *\n * If the version is aes128gcm, the keyid is extracted from the header and used\n * as the ECDH public key of the sender.  For version aesgcm ,\n * |params.dh| needs to be provided with the public key of the sender.\n *\n * The |params.privateKey| includes the private key of the receiver.\n */ function decrypt(buffer, params, keyLookupCallback) {\n    var header = parseParams(params);\n    if (header.version === \"aes128gcm\") {\n        var headerLength = readHeader(buffer, header);\n        buffer = buffer.slice(headerLength);\n    }\n    var key = deriveKeyAndNonce(header, MODE_DECRYPT, keyLookupCallback);\n    var start = 0;\n    var result = Buffer.alloc(0);\n    var chunkSize = header.rs;\n    if (header.version !== \"aes128gcm\") {\n        chunkSize += TAG_LENGTH;\n    }\n    for(var i = 0; start < buffer.length; ++i){\n        var end = start + chunkSize;\n        if (header.version !== \"aes128gcm\" && end === buffer.length) {\n            throw new Error(\"Truncated payload\");\n        }\n        end = Math.min(end, buffer.length);\n        if (end - start <= TAG_LENGTH) {\n            throw new Error(\"Invalid block: too small at \" + i);\n        }\n        var block = decryptRecord(key, i, buffer.slice(start, end), header, end >= buffer.length);\n        result = Buffer.concat([\n            result,\n            block\n        ]);\n        start = end;\n    }\n    return result;\n}\nfunction encryptRecord(key, counter, buffer, pad, header, last) {\n    keylog(\"encrypt\", buffer);\n    pad = pad || 0;\n    var nonce = generateNonce(key.nonce, counter);\n    var gcm = crypto.createCipheriv(AES_GCM, key.key, nonce);\n    var ciphertext = [];\n    var padSize = PAD_SIZE[header.version];\n    var padding = Buffer.alloc(pad + padSize);\n    padding.fill(0);\n    if (header.version !== \"aes128gcm\") {\n        padding.writeUIntBE(pad, 0, padSize);\n        keylog(\"padding\", padding);\n        ciphertext.push(gcm.update(padding));\n        ciphertext.push(gcm.update(buffer));\n        if (!last && padding.length + buffer.length < header.rs) {\n            throw new Error(\"Unable to pad to record size\");\n        }\n    } else {\n        ciphertext.push(gcm.update(buffer));\n        padding.writeUIntBE(last ? 2 : 1, 0, 1);\n        keylog(\"padding\", padding);\n        ciphertext.push(gcm.update(padding));\n    }\n    gcm.final();\n    var tag = gcm.getAuthTag();\n    if (tag.length !== TAG_LENGTH) {\n        throw new Error(\"invalid tag generated\");\n    }\n    ciphertext.push(tag);\n    return keylog(\"encrypted\", Buffer.concat(ciphertext));\n}\nfunction writeHeader(header) {\n    var ints = Buffer.alloc(5);\n    var keyid = Buffer.from(header.keyid || []);\n    if (keyid.length > 255) {\n        throw new Error(\"keyid is too large\");\n    }\n    ints.writeUIntBE(header.rs, 0, 4);\n    ints.writeUIntBE(keyid.length, 4, 1);\n    return Buffer.concat([\n        header.salt,\n        ints,\n        keyid\n    ]);\n}\n/**\n * Encrypt some bytes.  This uses the parameters to determine the key and block\n * size, which are described in the draft.\n *\n * |params.version| contains the version of encoding to use: aes128gcm is the latest,\n * but aesgcm is also accepted (though the latter two might\n * disappear in a future release).  If omitted, assume aes128gcm.\n *\n * If |params.key| is specified, that value is used as the key.\n *\n * For Diffie-Hellman (WebPush), |params.dh| includes the public key of the\n * receiver.  |params.privateKey| is used to establish a shared secret.  Key\n * pairs can be created using |crypto.createECDH()|.\n */ function encrypt(buffer, params, keyLookupCallback) {\n    if (!Buffer.isBuffer(buffer)) {\n        throw new Error(\"buffer argument must be a Buffer\");\n    }\n    var header = parseParams(params);\n    if (!header.salt) {\n        header.salt = crypto.randomBytes(KEY_LENGTH);\n    }\n    var result;\n    if (header.version === \"aes128gcm\") {\n        // Save the DH public key in the header unless keyid is set.\n        if (header.privateKey && !header.keyid) {\n            header.keyid = header.privateKey.getPublicKey();\n        }\n        result = writeHeader(header);\n    } else {\n        // No header on other versions\n        result = Buffer.alloc(0);\n    }\n    var key = deriveKeyAndNonce(header, MODE_ENCRYPT, keyLookupCallback);\n    var start = 0;\n    var padSize = PAD_SIZE[header.version];\n    var overhead = padSize;\n    if (header.version === \"aes128gcm\") {\n        overhead += TAG_LENGTH;\n    }\n    var pad = isNaN(parseInt(params.pad, 10)) ? 0 : parseInt(params.pad, 10);\n    var counter = 0;\n    var last = false;\n    while(!last){\n        // Pad so that at least one data byte is in a block.\n        var recordPad = Math.min(header.rs - overhead - 1, pad);\n        if (header.version !== \"aes128gcm\") {\n            recordPad = Math.min((1 << padSize * 8) - 1, recordPad);\n        }\n        if (pad > 0 && recordPad === 0) {\n            ++recordPad; // Deal with perverse case of rs=overhead+1 with padding.\n        }\n        pad -= recordPad;\n        var end = start + header.rs - overhead - recordPad;\n        if (header.version !== \"aes128gcm\") {\n            // The > here ensures that we write out a padding-only block at the end\n            // of a buffer.\n            last = end > buffer.length;\n        } else {\n            last = end >= buffer.length;\n        }\n        last = last && pad <= 0;\n        var block = encryptRecord(key, counter, buffer.slice(start, end), recordPad, header, last);\n        result = Buffer.concat([\n            result,\n            block\n        ]);\n        start = end;\n        ++counter;\n    }\n    return result;\n}\nfunction isFunction(object) {\n    return typeof object === \"function\";\n}\nmodule.exports = {\n    decrypt: decrypt,\n    encrypt: encrypt\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http_ece/ece.js\n");

/***/ })

};
;